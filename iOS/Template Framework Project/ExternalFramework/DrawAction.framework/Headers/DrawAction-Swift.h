// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

/**
  Abstract superclass for all actions. By default does nothing other than forward context onto the next action.
*/
SWIFT_CLASS("_TtC10DrawAction10DrawAction")
@interface DrawAction : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  Convenience method for chaining an array of actions together.
  \param actions Array of actions. For each item in the array, it is added to the previous

*/
+ (DrawAction * _Nonnull)chainActions:(NSArray<DrawAction *> * _Nonnull)actions;
/**
  Add an action to the chain that self is currently a part of. This operation is always an append, it will follow the existing chain until it hits the end. It does not insert it between existing actions
  \param newNext The action to add to the chain

*/
- (DrawAction * _Nonnull)add:(DrawAction * _Nonnull)newNext;
/**
  Draw the current action and following chain in the specified rect and CGContext
  \param rect The rect to initialize the action chain with

  \param context The CGContext to perform the draw operations in.

*/
- (void)drawRect:(CGRect)rect inContext:(CGContextRef _Nullable)context;
@end


/**
  Action that sets the opacity of subsequent draw actions. Useful when you want to apply transparency to an entire chain of draw actions without modifying the involved colors.
*/
SWIFT_CLASS("_TtC10DrawAction9DrawAlpha")
@interface DrawAlpha : DrawAction
/**
  Initializes a DrawAlpha
  \param alpha The opacity value to apply to subsequent draw actions

*/
- (nonnull instancetype)initWithAlpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIColor;

/**
  Action that strokes a border on the current rect or path
*/
SWIFT_CLASS("_TtC10DrawAction10DrawBorder")
@interface DrawBorder : DrawAction
/**
  Initializes a DrawBorder
  \param color The color of the border

  \param lineWidth The width of the border

  \param dashedLineLengths If non-nil, specifies the lengths of painted and unpainted segments as the border is
  drawn. For example, passing [2,3] would cause the border to draw 2 points of border followed by 3 points of space in a repeating pattern.

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color lineWidth:(CGFloat)lineWidth dashedLineLengths:(NSArray<NSNumber *> * _Nullable)dashedLineLengths OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawBorder with a lineWidth of 1
  \param color The color of the border

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color;
/**
  Initializes a DrawBorder with the specified lineWidth and color
  \param color The color of the border

  \param lineWidth The width of the border

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color lineWidth:(CGFloat)lineWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that strokes a border filled with a gradient
*/
SWIFT_CLASS("_TtC10DrawAction18DrawBorderGradient")
@interface DrawBorderGradient : DrawAction
/**
  Initializes a DrawBorderGradient
  \param colors The colors to use in the gradient

  \param lineWidth The width of the border

  \param inset if non-zero, the amount to try and inset the border relative to the path. The current path’s bounding box is used as a to calculate how to scale the path in each dimension by \code
  inset
  \endcode. This is not expected to work with more complex paths

  \param horizontal If true the gradient is applied left to right, otherwise top to bottom

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors lineWidth:(CGFloat)lineWidth inset:(CGFloat)inset horizontal:(BOOL)horizontal OBJC_DESIGNATED_INITIALIZER;
/**
  Initalizes a non-horizontal DrawBorderGradient
  \param colors The colors to use in the gradient

  \param lineWidth The width of the border

  \param inset if non-zero, the amount to try and inset the border relative to the path. The current path’s bounding box is used as a to calculate how to scale the path in each dimension by \code
  inset
  \endcode. This is not expected to work with more complex paths

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors lineWidth:(CGFloat)lineWidth inset:(CGFloat)inset;
/**
  Initializes a non horizontal DrawBorderGradient with a line width 1 and no inset
  \param colors The colors to use in the gradient

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that applies a clip to all subsequent draw actions based on the current path or rect
*/
SWIFT_CLASS("_TtC10DrawAction8DrawClip")
@interface DrawClip : DrawAction
/**
  Initializes a DrawClip
  \param evenOddFill Specifies which rule is used to calculate what part of the path should be clipped. If true, uses the even-odd rule, otherwise uses the winding number rule.

*/
- (nonnull instancetype)initWithEvenOddFill:(BOOL)evenOddFill OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawClip that uses the winding number rule
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/**
  Action that divides the current rect into two pieces, optionally applying a separate action chain to the ‘slice’ of the rect
*/
SWIFT_CLASS("_TtC10DrawAction10DrawDivide")
@interface DrawDivide : DrawAction
/**
  Initializes a DrawDivide. Any actions added after this one (via \code
  add
  \endcode or \code
  chainActions
  \endcode) will have their rect set to the remainder rect the results from the divide action.
  \param amount The amount, starting from \code
  edge
  \endcode, that should be carved off the current rect and used as the rect for \code
  slice
  \endcode

  \param padding Amount to leave off between the slice and the remaining rect

  \param edge The edge of the rect to base the slice from

  \param slice Optional \code
  DrawAction
  \endcode that will have its rect set to the slice rect.

*/
- (nonnull instancetype)initWithAmount:(CGFloat)amount padding:(CGFloat)padding edge:(CGRectEdge)edge slice:(DrawAction * _Nullable)slice OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawDivide. Any actions added after this one (via \code
  add
  \endcode or \code
  chainActions
  \endcode) will have their rect set to the remainder rect the results from the divide action.
  \param amount The amount, starting from \code
  edge
  \endcode, that should be carved off the current rect and used as the rect for \code
  slice
  \endcode

  \param edge The edge of the rect to base the slice from

  \param slice Optional \code
  DrawAction
  \endcode that will have its rect set to the slice rect.

*/
- (nonnull instancetype)initWithAmount:(CGFloat)amount edge:(CGRectEdge)edge slice:(DrawAction * _Nullable)slice;
/**
  Initializes a DrawDivide allowing you to provide the next action in addition to the slice. This is equivalent to initializing it with just the slice action and then calling \code
  add
  \endcode with next.
  \param amount The amount, starting from \code
  edge
  \endcode, that should be carved off the current rect and used as the rect for \code
  slice
  \endcode

  \param edge The edge of the rect to base the slice from

  \param slice Optional \code
  DrawAction
  \endcode that will have its rect set to the slice rect.

  \param next \code
  DrawAction
  \endcode to add to the divide. Its rect will be the remainder of the divide operation.

*/
- (nonnull instancetype)initWithAmount:(CGFloat)amount edge:(CGRectEdge)edge slice:(DrawAction * _Nullable)slice next:(DrawAction * _Nonnull)next;
/**
  Initializes a DrawDivide. Any actions added after this one (via \code
  add
  \endcode or \code
  chainActions
  \endcode) will have their rect set to the remainder rect the results from the divide action.
  \param amount The amount, starting from \code
  edge
  \endcode, that should be carved off the current rect and used as the rect for \code
  slice
  \endcode

  \param padding Amount to leave off between the slice and the remaining rect

  \param edge The edge of the rect to base the slice from

  \param slice Optional \code
  DrawAction
  \endcode that will have its rect set to the slice rect.

  \param next \code
  DrawAction
  \endcode to add to the divide. Its rect will be the remainder of the divide operation.

*/
- (nonnull instancetype)initWithAmount:(CGFloat)amount padding:(CGFloat)padding edge:(CGRectEdge)edge slice:(DrawAction * _Nullable)slice next:(DrawAction * _Nonnull)next;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that performs a fill on the current path or rect
*/
SWIFT_CLASS("_TtC10DrawAction8DrawFill")
@interface DrawFill : DrawAction
/**
  Initializes a DrawFill
  \param color color to fill with

  \param blendMode The \code
  CGBlendMode
  \endcode to use during the fill operation

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color blendMode:(CGBlendMode)blendMode OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawFill using \code
  CGBlendMode.Normal
  \endcode blend mode
  \param color color to fill with

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that draws a linear or radial gradient in the current rect
*/
SWIFT_CLASS("_TtC10DrawAction12DrawGradient")
@interface DrawGradient : DrawAction
/**
  Initializes a linear DrawGradient
  \param colors colors to use in the gradient

  \param startPoint CGPoint in the unit coordinate system that specifies where the gradient starts. e.g., a point of (0.5, 0) would start the gradient at the top middle of the rect.

  \param endPoint CGPoint in the unit coordinate system that specifies where the gradient ends

  \param locations If supplied, specifies the relative location along the gradient line where the color stops occur. Must be a value from 0-1. Each location corresponds to a color in the color array. If nil, the locations are spread uniformly from 0 - 1, with the first color having a value of 0 and the last color having a value of 1

  \param extendEdges If true the starting and ending colors will continue to draw beyond the start and end point respectively.

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint locations:(NSArray<NSNumber *> * _Nullable)locations extendEdges:(BOOL)extendEdges OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a linear DrawGradient that does not extend edges
  \param colors colors to use in the gradient

  \param startPoint CGPoint in the unit coordinate system that specifies where the gradient starts. e.g., a point of (0.5, 0) would start the gradient at the top middle of the rect.

  \param endPoint CGPoint in the unit coordinate system that specifies where the gradient ends

  \param locations If supplied, specifies the relative location along the gradient line where the color stops occur. Must be a value from 0-1. Each location corresponds to a color in the color array. If nil, the locations are spread uniformly from 0 - 1, with the first color having a value of 0 and the last color having a value of 1

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint locations:(NSArray<NSNumber *> * _Nullable)locations;
/**
  Initializes a linear DrawGradient that’s either horizontal or vertical
  \param colors colors to use in the gradient

  \param horizontal If true, specifies a start point and end point to draw the gradient horizontally across the rect. Otherwise it will draw it vertically across the rect.

  \param locations If supplied, specifies the relative location along the gradient line where the color stops occur. Must be a value from 0-1. Each location corresponds to a color in the color array. If nil, the locations are spread uniformly from 0 - 1, with the first color having a value of 0 and the last color having a value of 1

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors horizontal:(BOOL)horizontal locations:(NSArray<NSNumber *> * _Nullable)locations;
/**
  Initializes a linear DrawGradient that’s either horizontal or vertical with default locations
  \param colors colors to use in the gradient

  \param horizontal If true, specifies a start point and end point to draw the gradient horizontally across the rect. Otherwise it will draw it vertically across the rect.

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors horizontal:(BOOL)horizontal;
/**
  Initializes a radial DrawGradient
  \param colors colors to use in the gradient

  \param startRadius CGFloat specifying at which radius the first color begins. The origin of the circle is the center of the current rect

  \param endRadius CGFloat specifycing at which radius the last color ends.

  \param locations If supplied, specifies the relative location along the gradient radii where the color stops occur. Must be a value from 0-1. Each location corresponds to a color in the color array. If nil, the locations are spread uniformly from 0 - 1, with the first color having a value of 0 and the last color having a value of 1

  \param extendEdges If true the starting and ending colors will continue to draw beyond the start and end point respectively.

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startRadius:(CGFloat)startRadius endRadius:(CGFloat)endRadius locations:(NSArray<NSNumber *> * _Nullable)locations extendEdges:(BOOL)extendEdges OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a radial DrawGradient that does not extend edges
  \param colors colors to use in the gradient

  \param startRadius CGFloat specifying at which radius the first color begins. The origin of the circle is the center of the current rect

  \param endRadius CGFloat specifycing at which radius the last color ends.

  \param locations If supplied, specifies the relative location along the gradient radii where the color stops occur. Must be a value from 0-1. Each location corresponds to a color in the color array. If nil, the locations are spread uniformly from 0 - 1, with the first color having a value of 0 and the last color having a value of 1

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startRadius:(CGFloat)startRadius endRadius:(CGFloat)endRadius locations:(NSArray<NSNumber *> * _Nullable)locations;
/**
  Initializes a radial DrawGradient with the default locations
  \param colors colors to use in the gradient

  \param startRadius CGFloat specifying at which radius the first color begins. The origin of the circle is the center of the current rect

  \param endRadius CGFloat specifycing at which radius the last color ends.

*/
- (nonnull instancetype)initWithColors:(NSArray<UIColor *> * _Nonnull)colors startRadius:(CGFloat)startRadius endRadius:(CGFloat)endRadius;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIImage;

/**
  Action that draws the given UIImage
*/
SWIFT_CLASS("_TtC10DrawAction9DrawImage")
@interface DrawImage : DrawAction
/**
  Initializes a DrawImage
  \param image The image to draw

  \param contentMode The content mode to respect when performing the draw operation. Behavior is undefined if passed \code
  .Redraw
  \endcode

  \param blendMode The \code
  CGBlendMode
  \endcode to use when drawing the image

  \param alpha The alpha to apply to the image while drawing

*/
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image contentMode:(UIViewContentMode)contentMode blendMode:(CGBlendMode)blendMode alpha:(CGFloat)alpha OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawImage with a normal blend mode and alpha of 1
  \param image The image to draw

  \param contentMode The content mode to respect when performing the draw operation. Behavior is undefined if passed \code
  .Redraw
  \endcode

*/
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image contentMode:(UIViewContentMode)contentMode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that insets the current rect for subsequent draw actions
*/
SWIFT_CLASS("_TtC10DrawAction9DrawInset")
@interface DrawInset : DrawAction
/**
  Initializes a DrawInset
  \param insets The UIEdgeInsets to apply to the current rect

*/
- (nonnull instancetype)initWithInsets:(UIEdgeInsets)insets OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawInset
  \param widthInset The inset to apply to the left and right side of the current rect

  \param heightInset the inset to apply to the top and bottom side of the current rect

*/
- (nonnull instancetype)initWithWidthInset:(CGFloat)widthInset heightInset:(CGFloat)heightInset;
/**
  Initializes a DrawInset
  \param uniformInset The inset to apply to all sides of the current rect

*/
- (nonnull instancetype)initWithUniformInset:(CGFloat)uniformInset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSValue;

/**
  Action that draws one or more line segments. Points provided to initializers are specified in the unit coordinate system and mapped to the current rect.
  For example the point array [(0, 0), (1, 1)] would draw a line from the top left to the bottom right corner of the rect.
*/
SWIFT_CLASS("_TtC10DrawAction8DrawLine")
@interface DrawLine : DrawAction
/**
  Initializes a DrawLine
  \param points Array of points organized as pairs specifying the start and end of each segment, so there must be an even number of points.

  \param color color to stroke the line segments

  \param lineWidth line width of the segments

*/
- (nonnull instancetype)initWithPoints:(NSArray<NSValue *> * _Nonnull)points color:(UIColor * _Nonnull)color lineWidth:(CGFloat)lineWidth OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawLine. Equivalent initializer to \code
  init(points:color:lineWidth)
  \endcode, but takes an array of NSValues containing CGPoints. For objective-c compatibility
*/
- (nonnull instancetype)initWithBoxedPoints:(NSArray<NSValue *> * _Nonnull)boxedPoints color:(UIColor * _Nonnull)color lineWidth:(CGFloat)lineWidth;
/**
  Initializes a DrawLine with a single line segment
  \param startPoint startPoint of the line segment. Defined in the unit coordinate system

  \param endPoint startPoint of the line segment. Defined in the unit coordinate system

  \param color color to stroke the line segments

  \param lineWidth line width of the segments

*/
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint color:(UIColor * _Nonnull)color lineWidth:(CGFloat)lineWidth;
/**
  Initializes a DrawLine with a single line segment of width 1
  \param startPoint startPoint of the line segment. Defined in the unit coordinate system

  \param endPoint startPoint of the line segment. Defined in the unit coordinate system

  \param color color to stroke the line segments

*/
- (nonnull instancetype)initWithStartPoint:(CGPoint)startPoint endPoint:(CGPoint)endPoint color:(UIColor * _Nonnull)color;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class UIBezierPath;

/**
  Action that defines a new path for subsequent draw actions
*/
SWIFT_CLASS("_TtC10DrawAction8DrawPath")
@interface DrawPath : DrawAction
/**
  Initializes a DrawPath that generates a path at draw time
  \param pathGenerator A closure that gets run at draw time. The size passed in is the size of the current rect. The return value should be a UIBezierPath.
  The path should be defined relative to the rect with origin zero and the specified size. It then gets translated according to the current rect origin.

*/
- (nonnull instancetype)initWithPathGenerator:(UIBezierPath * _Nonnull (^ _Nonnull)(CGSize))pathGenerator OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawPath with a predefined path
  \param path A UIBezierPath to apply to future actions. Path will be relative to the current rect at the time of drawing

*/
- (nonnull instancetype)initWithPath:(UIBezierPath * _Nonnull)path OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawPath with a rounded rect path for the current rect
  \param roundedCorners the corners to round. Corners not specified will draw right angles

  \param radii A CGSize specifying the horizontal and vertical radii to use for the rounded oval corners.

*/
- (nonnull instancetype)initWithRoundedCorners:(UIRectCorner)corners radii:(CGSize)radii;
/**
  Initializes a DrawPath with a rounded rect path for the current rect
  \param roundedRectRadius The radius to use for all corners. So each corner will be quarter circles of the specified radius.

*/
- (nonnull instancetype)initWithRoundedRectRadius:(CGFloat)radius;
/**
  Initializes a DrawPath with a path that runs the perimeter of the current rect
*/
- (nonnull instancetype)init;
/**
  Initializes a DrawPath optionally with an oval in the current rect
  \param oval If true, the path defines an oval in the current rect. Otherwise this is the same as calling \code
  init()
  \endcode

*/
- (nonnull instancetype)initWithOval:(BOOL)oval;
@end


/**
  Action that defines a shadow to apply to all future draw actions
*/
SWIFT_CLASS("_TtC10DrawAction10DrawShadow")
@interface DrawShadow : DrawAction
/**
  Initializes a DrawShadow
  \param color Tho color to use for the shadow

  \param blur The blur radius to apply to the shadow

  \param offset CGSize defining the width and height offset to apply to the shadow when rendering

*/
- (nonnull instancetype)initWithColor:(UIColor * _Nonnull)color blur:(CGFloat)blur offset:(CGSize)offset OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that defines a separate action chain to run before the main chain
  Splits define a chain of actions to run before the main chain, resetting state (shadow, path, rect, etc.)
  For example in the following code
  let leftAction = DrawPath(roundedRectRadius: 5).add(DrawFill(color: UIColor.redColor()))
  let rightAction = DrawFill(color: UIColor.blueColor())
  let action = DrawSplit(split: leftAction, next: rightAction)
  When \code
  action
  \endcode is drawn, it will first draw a red oval, followed by a blue rect in the current rect.
*/
SWIFT_CLASS("_TtC10DrawAction9DrawSplit")
@interface DrawSplit : DrawAction
/**
  Initializes a DrawSplit with the specified chain
  \param split A \code
  DrawAction
  \endcode that will run before any actions that are added after this one

*/
- (nonnull instancetype)initWithSplit:(DrawAction * _Nonnull)split OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawSplit with the specified chain
  \param split A \code
  DrawAction
  \endcode that will run before any actions that are added after this one

  \param next A \code
  DrawAction
  \endcode to add, will be run after the split is run.

*/
- (nonnull instancetype)initWithSplit:(DrawAction * _Nonnull)split next:(DrawAction * _Nonnull)next;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSAttributedString;
@class UIFont;

/**
  Action that renders text in the current rect
*/
SWIFT_CLASS("_TtC10DrawAction8DrawText")
@interface DrawText : DrawAction
/**
  Initializes a DrawText with the specified attributed string
  \param attributedText NSAttributedString to render. See NSAttributedString documentation for the supported attributes

  \param drawOptions Drawing options to use when rendering the attributed text. See \code
  NSStringDrawingOptions
  \endcode in the \code
  NSString
  \endcode documentation for the possible values and their implications.

*/
- (nonnull instancetype)initWithAttributedText:(NSAttributedString * _Nonnull)attributedText drawOptions:(NSStringDrawingOptions)drawOptions OBJC_DESIGNATED_INITIALIZER;
/**
  Initializes a DrawText with the specified attributed string. Drawing is done with the \code
  UsesLineFragmentOrigin
  \endcode and \code
  UsesFontLeading
  \endcode draw options.
  \param attributedText NSAttributedString to render

*/
- (nonnull instancetype)initWithAttributedText:(NSAttributedString * _Nonnull)attributedText;
/**
  Initializes a DrawText with the specified properties
  \param text The string to render

  \param font The font to render the text with

  \param color The color to stroke the font with

  \param alignment Text alignment to use when rendering

  \param lineBreakMode Line break mode to use when rendering

  \param underlineStyle Specifies how to underline the text

*/
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color alignment:(NSTextAlignment)alignment lineBreakMode:(NSLineBreakMode)lineBreakMode underlineStyle:(NSUnderlineStyle)underlineStyle;
/**
  Initializes a DrawText with the specified properties
  \param text The string to render

  \param font The font to render the text with

  \param color The color to stroke the font with

  \param alignment Text alignment to use when rendering

  \param lineBreakMode Line break mode to use when rendering

*/
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color alignment:(NSTextAlignment)alignment lineBreakMode:(NSLineBreakMode)lineBreakMode;
/**
  Initializes a DrawText with the specified properties
  \param text The string to render

  \param font The font to render the text with

  \param color The color to stroke the font with

*/
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text font:(UIFont * _Nonnull)font color:(UIColor * _Nonnull)color;
/**
  Initializes a DrawText with the specified properties
  \param text The string to render

  \param font The font to render the text with

*/
- (nonnull instancetype)initWithText:(NSString * _Nonnull)text font:(UIFont * _Nonnull)font;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  Action that begins a separate CGContext transparency layer. All actions performed after this action will be treated as one atomic drawing operation for the current context.
  For example, if a DrawShadow is earlier in the chain, and two DrawFills with different rects are defined later in the chain, the shadow will be applied once to the union of the fill operations, rather
  than once for each fill (preventing shadow overlap)
  If you’re looking to adjust the transparency of all drawing, see ‘DrawAlpha’ instead
*/
SWIFT_CLASS("_TtC10DrawAction16DrawTransparency")
@interface DrawTransparency : DrawAction
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#pragma clang diagnostic pop
